---
# Designed to run on Debian 12
- hosts: all
  # must enable root SSH: vi /etc/ssh/sshd_config PermitRootLogin and restart sshd
  become: false
  # remote_user: root # see inventory
  gather_facts: false
  
  tasks:

    # ------------------------------------------------------
    - name: INITIAL SETUP BLOCK
      block:

        - name: Set TZ
          community.general.timezone:
            name: "{{ h_tz }}"

        - name: Set time syncing
          ansible.builtin.command:
            cmd: timedatectl set-ntp true

        - name: Set hostname
          ansible.builtin.hostname:
            name: h-equals-h
        
        - name: Set static ip FQDN hostname in hosts
          ansible.builtin.lineinfile:
            path: /etc/hosts
            line: "{{ h_static_ip }} {{ h_fqdn }} {{ h_hostname }}"

        - name: Update software
          ansible.builtin.apt:
            update_cache: true
            upgrade: full

        - name: Configure root pw
          ansible.builtin.user:
            name: root
            password: "{{ h_root_pw_hash }}"

        - name: Configure basic user
          ansible.builtin.user:
            name: "{{ h_admin_user_name }}"
            groups: 
              - sudo 
              - www-data
            shell: /bin/bash
            password: "{{ h_admin_user_pw_hash }}"

        - name: Basic user env
          ansible.builtin.lineinfile:
            line: "alias ll=\"ls -ahl --color\""
            path: "/home/{{ h_admin_user_name }}/.bashrc"

        - name: See if ec2-user and key exists
          stat: path=/home/ec2-user/.ssh
          register: stat_result

        - name: Use ssh key from ec2-user for basic user
          # you downloaded the ec2-user key, right?
          ansible.builtin.copy:
            remote_src: true
            src: /home/ec2-user/.ssh
            dest: "/home/{{ h_admin_user_name }}/.ssh"
            owner: "{{ h_admin_user_name }}"
            group: "{{ h_admin_user_name }}"
          when: stat_result.stat.isdir|d(False)
        
        - name: Remove ec2-user
          ansible.builtin.user:
            name: ec2-user
            state: absent
            remove: true
          when: stat_result.stat.isdir|d(False)

        - name: Install base OS utilities 
          ansible.builtin.apt:
            name: 
              - sudo
              - unzip
              - screen
              - htop
              - git
              - vim
              - openssl
              # - iptables # firewalld?
              - tree
              - curl
              - whois
              - cockpit

        - name: Configure sudo
          community.general.sudoers:
            name: sudo-as-root
            state: present
            group: sudo
            runas: root
            commands: ALL

    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: FIREWALL SETUP BLOCK
    # - name: Install firewall
    # - name: Configure firewall 
    # ------------------------------------------------------

    # ------------------------------------------------------
    # https://wiki.debian.org/PostgreSql
    - name: PG SETUP BLOCK
      block:

        - name: Retrieve and install pgsql
          ansible.builtin.apt:
            update_cache: true
            name: 
              - "postgresql"
              - "postgresql-client"
          
        - name: Set postgres system user pw
          ansible.builtin.user:
            name: postgres
            password: "{{ h_postgres_user_pw_hash }}"

        - name: Create system user for db user 
          ansible.builtin.user:
            name: "{{ h_db_user_name }}"
            password: "{{ h_db_user_pw_hash }}"

        - name: Create postgres db user
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: >
              psql -d postgres -c 
              "CREATE ROLE {{ h_db_user_name }} PASSWORD
               '{{ h_db_user_pg_pw_hash }}'
               NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN;"

        - name: Create postgres db 
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: "createdb -O {{ h_db_user_name }} {{ h_db_name }}"

        - name: Grant privs on postgres user against db
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: >
              psql -d postgres -c 'ALTER ROLE {{ h_db_user_name }} LOGIN; 
              GRANT CONNECT, CREATE ON DATABASE {{ h_db_name }} TO {{ h_db_user_name }};'

            # TODO ensure user can only connect locally

        - name: Configure postgres to allow and prioritize unix domain socket connections with scram-sha-256 auth
          ansible.builtin.lineinfile:
            path: /etc/postgresql/15/main/pg_hba.conf
            line: "local  all  all  scram-sha-256 # for web server using unix domain socket conns"
            insertbefore: '^.*local.*all.*all.*peer'

        - name: Enable and restart postgresql
          ansible.builtin.service:
            name: postgresql
            state: restarted
            enabled: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: PHP SETUP BLOCK
      block: 
        - name: Retrieve and install php
          ansible.builtin.apt:
            update_cache: true
            name: 
              - php-fpm # fpm version used with lighttpd
              - php-xml # for phpbb
              - php-mbstring # for phpbb
              - php-pgsql # for phpbb
              - php-curl # for grav
              - php-gd # for grav
              - php-zip # for grav

        # - name: Configure php with sane defaults for 2gb system, memory limits, file upload limits, et.

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: HTTPD SETUP BLOCK
      block: 

        - name: Retrieve and install httpd
          ansible.builtin.apt:
            update_cache: true
            name: "{{ item }}"
          loop:
            - lighttpd
            - lighttpd-mod-deflate
            - lighttpd-mod-openssl

        - name: Configure httpd for php, must have php-fpm installed
          ansible.builtin.command:
            cmd: lighty-enable-mod fastcgi-php-fpm 

        - name: Link /www to /var/www/html for convenience
          ansible.builtin.file:
            src: /var/www/html
            dest: /www
            state: link 

        - name: Enable and restart lighttpd
          ansible.builtin.service:
            name: lighttpd
            state: restarted
            enabled: true

        # TODO ansibleify
        - name: Clear anything installed in /var/www/html
          ansible.builtin.shell:
            cmd: "rm -rf /www/*"

        # TODO setup SSL https://wiki.debian.org/Lighttpd#SSL.2FTLS_.28HTTPS.29
    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: PHPBB SETUP BLOCK
      block: 

        - name: Retrieve phpBB
          ansible.builtin.get_url:
            url: "{{ h_phpbb_url }}"
            dest: /www/phpbb.zip
            mode: '0755'
          
        - name: Install phpBB
          ansible.builtin.unarchive:
            remote_src: true
            src: /www/phpbb.zip
            dest: /www/

        - name: Copy phpBB to target forum root
          ansible.builtin.copy:
            remote_src: true
            src: /www/phpBB3/
            dest: "/www/{{ h_forum_dir_name }}/"

        - name: Remove phpbb src
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /www/phpbb.zip
            - /www/phpBB3

        - name: Retrieve American English Language Pack for phpBB3
          ansible.builtin.get_url:
            url: "{{ h_phpbb_lang_url }}"
            dest: "/tmp/en_us.zip"
          
        - name: Unzip language pack
          ansible.builtin.unarchive:
            remote_src: true
            src: "/tmp/en_us.zip"
            dest: /www/{{ h_forum_dir_name }}/

        - name: Install language pack to forum root
          ansible.builtin.copy:
            remote_src: true
            # TODO predict this folder name or just somehow extract from under it
            src: "/www/{{ h_forum_dir_name }}/american_english_4_14_0/"
            dest: /www/{{ h_forum_dir_name }}/

        - name: Remove language pack src
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/www/{{ h_forum_dir_name }}/american_english_4_14_0/"
            - "/tmp/en_us.zip"
          
        - name: Finalize permissions of www
          ansible.builtin.file:
            path: /var/www/html
            owner: www-data
            group: www-data
            mode: '2770'
            recurse: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: GRAV SETUP BLOCK
      block:

          - name: Retrieve grav-admin
            ansible.builtin.get_url:
              url: https://getgrav.org/download/core/grav-admin/latest
              dest: /www/grav.zip
              mode: '0755'

          - name: Unzip grav
            ansible.builtin.unarchive:
              remote_src: true
              src: /www/grav.zip
              dest: /www/

          - name: Install grav
            ansible.builtin.copy:
              remote_src: true
              src: /www/grav-admin/
              dest: /www/grav_path/ # DEBUG

          - name: Clear grav src
            ansible.builtin.file:
              path: "{{ item }}"
              state: absent
            loop:
              - /www/grav.zip
              - /www/grav-admin/

          - name: Retrieve latest grav lighttpd conf 
            ansible.builtin.get_url:
              url: https://raw.githubusercontent.com/getgrav/grav/refs/heads/master/webserver-configs/lighttpd.conf
              dest: /etc/lighttpd/conf-available/02-grav.conf
              mode: '0755'

          - name: Add mod_rewrite enabled to conf-available
            ansible.builtin.copy:
              content: >
                server.modules += ("mod_rewrite")
              dest: /etc/lighttpd/conf-available/01-enable-mod-rw.conf
              mode: '0755'

          # - name: Set webroot in grav lighttpd conf
          #   ansible.builtin.replace:
          #     path: /tmp/grav-lighttpd.conf
          #     regexp: "{{ item }}"
          #     replace: '' # empty is root
          #   loop:
          #     - '/grav_path/' # yes replace the slashes as well
          #     - '/grav_path'

          - name: Link confs to lighttpd
            ansible.builtin.file:
              src: "{{ item }}"
              dest: "/etc/lighttpd/conf-enabled/{{ item | basename }}"
              state: link
            loop:
              - /etc/lighttpd/conf-available/01-enable-mod-rw.conf
              - /etc/lighttpd/conf-available/02-grav.conf

          - name: Confirm we did not mangle the lighttpd conf - restart lighttpd
            ansible.builtin.service:
              name: lighttpd
              state: restarted

          - name: Finalize permissions of www
            ansible.builtin.file:
              path: /var/www/html
              owner: www-data
              group: www-data
              mode: '2770'
              recurse: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: CACHE SETUP BLOCK
    # - name: Create cache service user and directories
    # - name: Retrieve and install cache
    # - name: Configure cache
    # ------------------------------------------------------

    # COCKPIT ENABLE ON REBOOT? TODO

    # ------------------------------------------------------
    # - name: CLEANUP BLOCK
    - name: Disable root ssh
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "# PermitRootLogin yes"
        regexp: "^.*PermitRootLogin.*"
    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: SUMMARY BLOCK
    # - name: Echo path to phpbb URL for install
    # - name: Echo path to cockpit
    # ------------------------------------------------------