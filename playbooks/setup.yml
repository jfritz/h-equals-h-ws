---
# Designed to run on Debian 12
- name: Production Server Build
  hosts: all
  gather_facts: false

  tasks:

    # ------------------------------------------------------
    - name: INITIAL SETUP BLOCK
      block:

        - name: Set TZ
          community.general.timezone:
            name: "{{ h_tz }}"

        - name: Set time syncing
          ansible.builtin.command:
            cmd: timedatectl set-ntp true
          changed_when: true

        - name: Set hostname
          ansible.builtin.hostname:
            name: "{{ h_hostname }}"

        - name: Set static ip FQDN hostname in hosts
          ansible.builtin.lineinfile:
            path: /etc/hosts
            line: "{{ ansible_host }} {{ h_fqdn }} {{ h_hostname }}"

        - name: Update software
          ansible.builtin.apt:
            update_cache: true
            upgrade: full

        - name: Configure root pw
          ansible.builtin.user:
            name: root
            password: "{{ h_root_pw_hash }}"
          when: h_root_pw_hash

        - name: Configure groups
          ansible.builtin.group:
            name: db-data

        - name: Configure admin users groups if admin user exists (aws)
          ansible.builtin.user:
            name: admin
            groups:
              - sudo
              - www-data
              - db-data
            shell: /bin/bash

        - name: Configure basic user
          ansible.builtin.user:
            name: "{{ h_admin_user_name }}"
            groups:
              - sudo
              - www-data
              - db-data
            shell: /bin/bash
            password: "{{ h_admin_user_pw_hash }}"
          when: h_admin_user_name
          # TODO ensure this user can't ssh - use cockpit to local ip only?

        - name: Root user env
          ansible.builtin.lineinfile:
            line: "alias ll=\"ls -ahl --color\""
            path: "/root/.bashrc"
            create: true
            owner: root
            group: root
            mode: "0700"

        - name: Admin user env
          ansible.builtin.lineinfile:
            line: "alias ll=\"ls -ahl --color\""
            path: "/home/admin/.bashrc"
            owner: admin
            group: admin
            mode: "0700"
          failed_when: false # ignore if user doesn't exist - aws

        - name: Basic user env
          ansible.builtin.lineinfile:
            line: "alias ll=\"ls -ahl --color\""
            path: "/home/{{ h_admin_user_name }}/.bashrc"
          when: h_admin_user_name

        - name: Install base OS utilities
          ansible.builtin.apt:
            name:
              - acl # helper for ansible elevation to non priv user (postgres)
              - sudo
              - unzip
              - vim
              - openssl
              - tree
              - curl
              - whois # for generating passwords
              - cockpit
              - lsof # for debug
              - certbot # for ssl cert sign
              - rsync # for backups
              - bzip2 # for openscap OVAL defs
              - openscap-scanner

# TURN ON SWAP SPACE TEMPORARILY ON AWS INSTANCE
        # $ sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
        # $ sudo /sbin/mkswap /var/swap.1
        # $ sudo chmod 600 /var/swap.1
        # $ sudo /sbin/swapon /var/swap.1

        - name: Create cockpit conf dir
          ansible.builtin.file:
            path: /etc/systemd/system/cockpit.socket.d/
            state: directory
            owner: 'root'
            group: 'root'
            mode: '0755'

        - name: Set cockpit to custom port
          ansible.builtin.copy:
            dest: /etc/systemd/system/cockpit.socket.d/listen.conf
            # Empty ListenStream is required to disable 9090
            content: |
              [Socket]
              ListenStream=
              ListenStream=8718
              FreeBind=yes
            owner: 'root'
            group: 'root'
            mode: '0755'

        - name: Reload systemd daemons
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Enable and restart cockpit
          ansible.builtin.service:
            name: "{{ item }}"
            state: restarted
            enabled: true
          loop:
            - cockpit
            - cockpit.socket

        - name: Configure sudo
          community.general.sudoers:
            name: sudo-as-root
            state: present
            group: sudo
            runas: root
            commands: ALL

    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: FIREWALL SETUP BLOCK
    # - name: Install firewall
    # - name: Configure firewall
    # ------------------------------------------------------

    # ------------------------------------------------------
    # https://wiki.debian.org/PostgreSql
    - name: PG SETUP BLOCK
      block:

        - name: Retrieve and install pgsql
          ansible.builtin.apt:
            update_cache: true
            name:
              - "postgresql"
              - "postgresql-client"

        - name: Set postgres system user pw/group
          ansible.builtin.user:
            name: postgres
            group: db-data
            password: "{{ h_postgres_user_pw_hash }}"
            shell: "/usr/sbin/nologin"

        - name: Create system user for db user
          ansible.builtin.user:
            name: "{{ h_db_user_name }}"
            group: db-data
            password: "{{ h_db_user_pw_hash }}"
            shell: "/usr/sbin/nologin"

        - name: Create postgres db user
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: >
              psql -d postgres -c
              "CREATE ROLE {{ h_db_user_name }} PASSWORD
               '{{ h_db_user_pg_pw_hash }}'
               NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN;"
          register: dbu_create
          failed_when:
            - dbu_create.rc != 0
            # Ignore if user already exists
            - '"already exists" not in dbu_create.stderr'
          changed_when: true
          tags:
            - db

        - name: Create postgres db
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: "createdb -O {{ h_db_user_name }} {{ h_db_name }}"
          register: db_create
          failed_when:
            - db_create.rc != 0
            # Ignore if user already exists
            - '"already exists" not in db_create.stderr'
          changed_when: true
          tags:
            - db

        - name: Grant privs on postgres user against db
          become: true
          become_user: postgres
          ansible.builtin.command:
            cmd: >
              psql -d postgres -c 'ALTER ROLE {{ h_db_user_name }} LOGIN;
              GRANT CONNECT, CREATE ON DATABASE {{ h_db_name }} TO {{ h_db_user_name }};'
          changed_when: true
          tags:
            - db

            # TODO ensure user can only connect locally

        - name: Configure postgres to allow and prioritize unix domain socket connections with scram-sha-256 auth
          ansible.builtin.lineinfile:
            path: /etc/postgresql/15/main/pg_hba.conf
            line: "local  all  all  scram-sha-256 # for web server using unix domain socket conns"
            insertbefore: '^.*local.*all.*all.*peer'

        - name: Enable and restart postgresql
          ansible.builtin.service:
            name: postgresql
            state: restarted
            enabled: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: PHP SETUP BLOCK
      block:
        - name: Retrieve and install php
          ansible.builtin.apt:
            update_cache: true
            name:
              - php-fpm # fpm version used with lighttpd
              - php-xml # for phpbb
              - php-mbstring # for phpbb
              - php-pgsql # for phpbb
              - php-curl # for grav
              - php-gd # for grav
              - php-zip # for grav
              - php-intl # for grav plugis
              - php-yaml # for grav plugis
              - php-apcu # for grav caching, but not required

        # - name: Configure php with sane defaults for 2gb system, memory limits, file upload limits, et.

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: HTTPD SETUP BLOCK
      block:

        - name: Retrieve and install httpd
          ansible.builtin.apt:
            update_cache: true
            name: "{{ item }}"
          loop:
            - lighttpd
            - lighttpd-mod-deflate
            - lighttpd-mod-openssl

        - name: Configure httpd for php, must have php-fpm installed
          ansible.builtin.command:
            cmd: lighty-enable-mod fastcgi-php-fpm
          register: lighty_result
          failed_when:
            - lighty_result.rc != 0
            # Ignore if user already exists
            - '"already enabled" not in lighty_result.stdout'
          changed_when: true

        - name: SSL SETUP BLOCK
          when: ssl_enabled
          block:

            - name: Lay down custom ssl conf
              ansible.builtin.copy:
                src: ../roles/web-configs/files/10-ssl.conf
                dest: /etc/lighttpd/conf-available/10-ssl.conf
                mode: '0755'

            # See makefile pull-certs -- configure SSL on the web server by hand, then pull certs,
            # then you can run this ansible to deploy SSL moving forward
            - name: Lay down production SSL certs
              ansible.builtin.unarchive:
                src: ../certs/certs.tar.gz
                dest: /
                remote_src: false
                # Needs lighttpd restart - below

            - name: Configure httpd for ssl
              ansible.builtin.command:
                cmd: lighty-enable-mod ssl
              register: lighty_results
              failed_when:
                - lighty_results.rc != 0
                # Ignore if already enabled
                - '"already enabled" not in lighty_result.stdout'
              changed_when: true

        - name: Link /www to /var/www/html for convenience
          ansible.builtin.file:
            src: /var/www/html
            dest: /www
            state: link

        - name: Enable and restart lighttpd
          ansible.builtin.service:
            name: lighttpd
            state: restarted
            enabled: true

        - name: Clear anything installed in /var/www/html
          ansible.builtin.shell:
            cmd: "rm -rf /www/*"
          changed_when: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: PHPBB SETUP BLOCK
      block:

        - name: Retrieve phpBB
          ansible.builtin.get_url:
            url: "{{ h_phpbb_url }}"
            dest: /www/phpbb.zip
            mode: '0755'

        - name: Install phpBB
          ansible.builtin.unarchive:
            remote_src: true
            src: /www/phpbb.zip
            dest: /www/

        - name: Copy phpBB to target forum root
          ansible.builtin.copy:
            remote_src: true
            src: /www/phpBB3/
            dest: "/www/{{ h_forum_dir_name }}/"
            mode: '2770'

        - name: Remove phpbb src
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /www/phpbb.zip
            - /www/phpBB3

        - name: Retrieve American English Language Pack for phpBB3
          ansible.builtin.get_url:
            url: "{{ h_phpbb_lang_url }}"
            dest: "/tmp/en_us.zip"
            mode: "0770"

        - name: Unzip language pack
          ansible.builtin.unarchive:
            remote_src: true
            src: "/tmp/en_us.zip"
            dest: /www/{{ h_forum_dir_name }}/

        - name: Install language pack to forum root
          ansible.builtin.copy:
            remote_src: true
            # TODO predict this folder name or just somehow extract from under it
            src: "/www/{{ h_forum_dir_name }}/american_english_4_14_0/"
            dest: /www/{{ h_forum_dir_name }}/
            mode: "2770"

        - name: Remove language pack src
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/www/{{ h_forum_dir_name }}/american_english_4_14_0/"
            - "/tmp/en_us.zip"

        - name: Finalize permissions of www
          ansible.builtin.file:
            path: /var/www/html
            owner: www-data
            group: www-data
            mode: '2770'
            recurse: true

    # ------------------------------------------------------

    # ------------------------------------------------------
    - name: GRAV SETUP BLOCK
      block:

        - name: Retrieve grav-admin
          ansible.builtin.get_url:
            url: "{{ h_grav_url }}"
            dest: /www/grav.zip
            mode: '0755'

        - name: Unzip grav
          ansible.builtin.unarchive:
            remote_src: true
            src: /www/grav.zip
            dest: /www/

        - name: Install grav
          ansible.builtin.copy:
            remote_src: true
            src: /www/grav-admin/
            dest: /www/ # grav_path DEBUG
            mode: "2770"

        - name: Clear grav src
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /www/grav.zip
            - /www/grav-admin/

        - name: Lay down custom grav conf
          ansible.builtin.copy:
            src: ../roles/web-configs/files/02-grav.conf
            dest: /etc/lighttpd/conf-available/02-grav.conf
            mode: '0755'
          tags: webconf

        - name: Link confs to lighttpd
          ansible.builtin.file:
            src: "{{ item }}"
            dest: "/etc/lighttpd/conf-enabled/{{ item | basename }}"
            state: link
          loop:
            - /etc/lighttpd/conf-available/02-grav.conf
          tags: webconf

        - name: Confirm we did not mangle the lighttpd conf - restart lighttpd
          ansible.builtin.service:
            name: lighttpd
            state: restarted
          tags: webconf

        - name: Finalize permissions of www
          ansible.builtin.file:
            path: /var/www/html
            owner: www-data
            group: www-data
            mode: '2770'
            recurse: true

        - name: Remove default favicon
          ansible.builtin.file:
            state: absent
            path: /var/www/html/usr/themes/quark/images/favicon.ico

    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: FIREWALL CONFIG SETUP BLOCK
    # TODO relying on AWS security groups for this.
    # ------------------------------------------------------

    # ------------------------------------------------------
    # For cockpit protection - ssh password auth is disabled by default in debian 12
    - name: FAILLOCK SETUP BLOCK
      block:
        - name: Update /etc/pam.d/common-auth to inject faillock
          ansible.builtin.lineinfile:
            line: "auth required pam_faillock.so preauth audit silent deny=3 unlock_time=900"
            insertbefore: ".*pam_unix.so nullok.*$"
            path: /etc/pam.d/common-auth

        - name: Update /etc/pam.d/common-auth with faillock blocks
          ansible.builtin.blockinfile:
            content: |
              auth    [default=die] pam_faillock.so authfail audit deny=3 unlock_time=900
              auth    sufficient pam_faillock.so authsucc audit deny=3 unlock_time=900
            insertafter: ".*pam_unix.so nullok.*"
            path: /etc/pam.d/common-auth

        - name: Update /etc/pam.d/common-account to inject faillock
          ansible.builtin.lineinfile:
            # Insert at EOF
            line: "account required pam_faillock.so"
            path: /etc/pam.d/common-account

          # NOTE: The default /etc/security/faillock.conf is fine
    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: CACHE SETUP BLOCK
    # - name: Create cache service user and directories
    # - name: Retrieve and install cache
    # - name: Configure cache
    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: CLEANUP BLOCK
    - name: Disable root ssh
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "# PermitRootLogin yes"
        regexp: "^.*PermitRootLogin.*"

    - name: Remove acl
      ansible.builtin.apt:
        name: acl
        state: absent
    # ------------------------------------------------------

    # ------------------------------------------------------
    # - name: SUMMARY BLOCK
    - name: Echo paths
      ansible.builtin.debug:
        msg: |
          COCKPIT: http://{{ ansible_host }}:8718
          ROOT:    http://{{ ansible_host }}
          FORUM:   http://{{ ansible_host }}/{{ h_forum_dir_name }}
          ---
          COCKPIT: http://{{ h_fqdn }}:8718
          ROOT:    http://{{ h_fqdn }}
          FORUM:   http://{{ h_fqdn }}/{{ h_forum_dir_name }}


    # ------------------------------------------------------
